Comentar aula 05

CSS: /*blablabla*/ varias linhas

HTML: <!--blablabla-->

JS: /*blablabla*/ varias linhas e //blablabla.... unica linha linhas 

##########################################################################################################

Concatenar Usando o template String  aula 06

inicia com crase (`${nome da variavel}`)

#########################################################################################################
 
Nome dos Identificadores** aula 06

Podem come�ar com letras, $ ou _

N�o podem come�ar com n�meros

� poss�vel usar letras ou n�meros

� possivel usar acentos e s�mbolos

N�o podem conter espa�os

N�o podem ser palavras reservadas

Dicas
 Maiuscula e min�scula fazem diferen�a (ex: var a � diferente de var A)

Tente escolher nomes coerentes para as vari�veis(ex: var salario, var idade)

Evite se tornar um 'programador alfabeto'(ex: var a, var b, var c) ou um 'programador contador'(ex: var n1,
 var n2, var n3)

###########################################################################################################

Data Types (Tipo de dados) aula 06

--> typeof<-- identifica o tipo

number (ex: var n = 200, var n = 6, var n = 6.5)

string (ex: var n = "6.5", var n = "Google")

boolean 

null 

undefined

object

function

############################################################################################################

Converter Strig para N�mero aula 06

Nunber(nome da variavel)

Number.parseInt(nome variavel) Converte numeros inteiros, 5, 10, 5000 --> modo for�ado 

Number.parseFloat (nome variavel) Converte numeros decimais, 5.5, 10.3, 5000.2 --> modo for�ado

Converter N�mero para String

String(nome da variavel)

nome da variavel.toString()

##########################################################################################################

Formatando Strings aula 06

nome da variavel.length (define quantos caracteres a string tem)

nome da variavel.toUpperCase (define tudo em MAIUSCULO)

nome da variavel.toLwerCase (define tudo em minusculo)

nome da variavel.toFixed(2) (exibe 2 casas decimais)

nome da variavel.toFixed(2).replace('.', ',') (exibe 2 casas decimais e converte ponto em virgula) 

nome da variavel.toLocalString('pt-BR', {style: 'currency', currency: 'BRL'}) (exibe valores com cifr�o em rais ou dolar se usar USD)

#############################################################################################################################

Aula 07 Operadores Parte 1 (Aritméticos e atribuição)

Aritm�ticos binarios (depende de dois operandos, ex: 5+2) 
+ - * / % 

** este � potencia

Cuidados
5 + 3 / 2 = 6,5 (calcula primeiro a divisão 3/2 = 1.5 + 5 = 6,5)
(5+3) / 2 = 4   (Calcula primeiro os parenteses 5 + 3  = 8 / 2 = 4)

Orden de Precedência
1º ()
2º **
3º * / %
4ª + -

Simplificando
var n = 3
n = n + 4  pode Simplificar deste modo n += 4, somente quando for a mesma 
variavel no n
O mesmo para
n = n - 5   n -= 5
n = n * 4   n *= 4
n = n / 2   n /= 2
n = n ** 2  n **= 2
n = n % 5   n %= 5
Grande maioria das linguagens aceita esta sintaxe

Incremento
var x = 5
x = x + 1  x ++
x = x - 1  x --

#############################################################################

Aula 08 Operadores Parte 2 (Relacionais, Lógicos e Ternário)

Relacionais
>    
<
>=
<=
==
!=

5 > 2  = true
7 < 4  = false
8 >= 8 = true
9 <= 7 = false
5 == 5 = true
4 != 4 = false

se for na mesma linha primeiro calcula os Aritméticos e depois os Relacionais

Lógicos
!
&&
||

!  negação
&& conjunção (e)  (binario, depende de dois resultados)
|| disjunção (ou) (binario, depende de dois resultados)

se for na mesma linha primeiro calcula os Aritméticos e depois os Relacionais e 
depois os Lógicos 

Orden é primeiro o ! (não) depois o && (e) e por ultimo || (ou) se for na mesma linha 

Orden de Precedência
1º Aritméticos () ** / ...
2º Relacionais > < >=  ...
3º Lógicos ! && ||     ...  


Ternário
?
:
teste ? true : false
Ex: média >=7.0 ? "Aprovado" : "Reprovado"

####################################################################################

Aula 09

DOM (Document Object Model)

Árvore DOM
Elementos
              window (janela)
           /    |    \
   location  document  history
                |
               html
              /   \
          head     body
         /   \       |
      meta  title    | 
                   / /\ \
                 h1 p  p div
                       |
                    strong

Selecionando
por Marca --> gerElementsByTagName() Seleciona mais de um objeto use o []
por ID --> gerElementsById() Seleciona por ID
por Nome --> gerElementsByName() Seleciona por Nome use o []
por Classe --> gerElementsByClassName() Seleciona por Classe
por Seletor --> querySelestor()  
                querySelestorAll()
quando for selecionar Classe use . e quando for ID usar #

###################################################################################################################################

Aula 10

Eventos DOM

      <DIV>
mouseenter  mousemove
mousedown   mouseup
click       mouseout

Event reference <---- site com refencias

Funções (funciona com um bloco )
function ação { (parametros)

}

Caso tiver algum erro no codigo não vai funcionar, é necessario inspecionar
e verificar os erros com um x vermelho ao lado direito, ao clicar no erro 
var exibir a o nome do arquivo e numero da linha 

##################################################################################################################################

Aula 11

Condições

if {

}
else{

}
Tipos de Condição
simples
if {

}

composta
if {

}
else{

}


Sequência 

##################################################################################################################################

Aula 12

Condições Aninhadas ( um if dentro de outro if)
exemplo

if(cond1){
      bloco1
}
else{
      if(cond2){
            bloco2
      }
      else{
            bloco3
      }
}

Condição Múltipla (possibilidade de outros valores fixos)
exemplo
switch (expressão){
      case valor 1:
      ................
      break
      case valor 2:
      ................
      break
      case valor 3:
      ................
      break
      default:
      ................
      break
}

//break é obrigatório

##################################################################################################################################

Aula 13

Repetições
while (em quanto) com teste logico no inicio

while (condição) {
      bloco

}
fica repetindo enquanto a condição for verdadeira, quando for falsa sai do while

do (faça) com teste logico no final

do{
      bloco
}
while (condição)
fica fazendo o bloco enquanto a condição for verdadeira, quando for falsa sai do while

##################################################################################################################################

Aula 14

for (quando) fica repetindo o teste logico e incrementando até o teste logico dar falso
for(inicio; teste; incr){
      bloco
}

exemplo

var c=1;
for(c=1; c<=10; c++){
      bloco
}

##################################################################################################################################

Aula 15

Variáveis

Variáveis simples ---> só conseguem armazenar um valor por vez

Variáveis compostas ---> devem ser capazes de armazenar vários valores em uma mesma estrutura

    let ou var a = [5,3,2,1]  
vai ser igual a [0,1,2,3] isso é um vetor ou array
posição 0 = 5
posição 1 = 3
posição 2 = 2
posição 3 = 1

Exemplos
let ou var num = [5,8,4]
num [3] = 6 ---> define que o 6 vai na posição 3 o JS cria a posição se não exixtir 

num.push(7) ---> coloca o valor 7 na ultima posição

num.length ---> informa o comprimento, quantos elementos tem o array ou vetor do array

num.sort() ---> ordena os elementos ou valores em ordem crescente

num.indexOf() ---> busca valores dentro do vetor ou array


##################################################################################################################################

Aula 16

Funções = rotinas

são ações executadas assim que são chamadas ou em decorr^rncia de algum evento

uma função pode receber parâmetros e retornar um resultado

chamada --> parametro --> ação --> retorno
nem toda função tem parametros
nem toda função tem retorno

        
         nome     parametro
function parimpar(n){
      if (n % 2 == 0){   --> ação
            return 'par'
            }
            else{
                  return 'Ímpar' --> retorno
            }
}
let res = parimpar(11)
          chamada

##################################################################################################################################

Aula 17

Fundamentos
Variáveis e dados
Operadores
Condições
Repetições
Array
Function
DOM

HTML5
functions
objectos
modularização
RegEx
jSON
AJAX
NodejS

Objecto
let amigo = {nome:´José´,sexo:´M´, peso:85.4, engordar(p){} }

            amigo
            |José | M  | 85.4 | [function] |
             nome  sexo  peso   engordar{}